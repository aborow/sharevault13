<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

        <record id="send_lead_sms" model="base.automation">
            <field name="name">ShareVault: send SMS to team</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_create</field>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record.team_id:
    for tm in record.team_id.member_ids:
        if tm.mobile:
            base_url = request.env['ir.config_parameter'].get_param('web.base.url')
            base_url += '/web#id=%d&amp;view_type=form&amp;model=%s' % (record.id, record._name)
            env['sms.sms'].sudo().create({
                                    'number': tm.mobile,
                                    'body': 'New lead! %s' % base_url
                                    })
            </field>
        </record>
        <!-- Automated Action for Update Lead stages based on the score and lead type -->
        <record id="update_lead_stages" model="base.automation">
            <field name="name">ShareVault: Update Lead Stages</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_write</field>
            <field name="trigger_field_ids" eval="[(6,0,[ref('wibtec_custom_lead.field_crm_lead__odoo_score')])]"/>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record.type == 'lead':
    if record.odoo_score >= 40 and record.mql_type != 'scorein' and not record.st_sp_updated:
        sales_team = env['crm.team'].search([('name', 'ilike', 'Sales')], limit=1)
        record.write({
                        'lead_type': 'marketing_ql',
                        'mql_type': 'scorein',
                        'mql_type_date': datetime.date.today(),
                        'user_id': sales_team.alias_user_id and sales_team.alias_user_id.id or False,
                        'st_sp_updated': True,
                        'team_id': sales_team.id
                        })
        record.create_lead_sf()
            </field>
        </record>

        <record id="assign_contact_from_lead" model="base.automation">
            <field name="name">ShareVault: Assign Contact in Lead</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_create</field>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record:
    record.sudo().assign_contact_lead()
            </field>
        </record>

        <record id="create_sf_lead_from_website_form" model="base.automation">
            <field name="name">ShareVault: Create SF Lead</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_create</field>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record:
    record.create_sf_lead()
            </field>
        </record>

        <record id="ir_cron_update_odoo_score_in_lead" model="ir.cron">
            <field name='name'>CRM: Update Total Score in Leads</field>
            <field name='interval_number'>1</field>
            <field name='interval_type'>hours</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="False"/>
            <field name="doall" eval="False"/>
            <field name="code">model.update_odoo_score_leads()</field>
            <field name="state">code</field>
            <field name="model_id" ref="model_crm_lead"/>
        </record>

        <record id="ir_cron_sf_lead_sync_update_cd" model="ir.cron">
            <field name='name'>SalesForce: Sync Leads of Last 24 Hours ago(Create Date)</field>
            <field name='interval_number'>1</field>
            <field name='interval_type'>hours</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="False"/>
            <field name="doall" eval="False"/>
            <field name="code">model.sync_lead_from_sfcd(sync_by='create_date')</field>
            <field name="state">code</field>
            <field name="model_id" ref="model_sync_lead_wizard"/>
        </record>

        <record id="ir_cron_sf_lead_sync_update_md" model="ir.cron">
            <field name='name'>SalesForce: Sync Leads of Last 24 Hours ago(Modified Date)</field>
            <field name='interval_number'>1</field>
            <field name='interval_type'>hours</field>
            <field name="numbercall">-1</field>
            <field name="active" eval="False"/>
            <field name="doall" eval="False"/>
            <field name="code">model.sync_lead_from_sfcd(sync_by='modified_date')</field>
            <field name="state">code</field>
            <field name="model_id" ref="model_sync_lead_wizard"/>
        </record>



        <record id="assign_user_to_lead" model="base.automation">
            <field name="name">ShareVault: assign salesperson</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_create</field>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record.type == 'lead':
  user_id = False
  if not record.user_id:
    if record.team_id and record.team_id.alias_user_id:
      user_id = record.team_id.alias_user_id
  else:
    user_id = record.user_id
  if user_id:
    record.write({'user_id':user_id.id})
    notify_data = dict()
    new_partners = dict()
    new_channels = dict()
    res = record._message_auto_subscribe_followers({'user_id':user_id.id}, False)
    for pid, sids, template in res:
        new_partners.setdefault(pid, sids)
        if template:
            partner = env['res.partner'].browse(pid)
            lang = partner.lang if partner else None
            notify_data.setdefault((template, lang), list()).append(pid)
        record.message_subscribe([pid])
    for (template, lang), pids in notify_data.items():
        record._message_auto_subscribe_notify(pids, template)
            </field>
        </record>

        <record id="recycle_lead_score_from_lead" model="base.automation">
            <field name="name">ShareVault: Recycle score in Lead</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="trigger">on_write</field>
            <field name="active" eval="True"/>
            <field name="state">code</field>
            <field name="code">
if record.type == 'lead':
    record.recycle_lead_score()
            </field>
        </record>


    </data>
</odoo>
